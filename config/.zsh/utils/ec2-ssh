#!/bin/bash

function ec2-public-ip() {
    usage_exit() {
        echo "Usage: [-q query] [-c credential]" 1>&2
        return 0
    }

    QUERY=""
    EC2_PROFILE="default"

    while getopts q:c:h OPT
    do
        case $OPT in
            q)  QUERY=$OPTARG
                ;;
            c)  EC2_PROFILE=$OPTARG
                ;;
            h)  usage_exit
                return 0
                ;;
            \?) usage_exit
                return 0
                ;;
        esac
    done

    if [[ $QUERY == "" ]]; then
      PECO=peco
    else
      PECO="peco --query $QUERY"
    fi

    ec2-instances -c $EC2_PROFILE | eval $PECO | awk '{ print $2 }'
}

function ec2-private-ip() {
    usage_exit() {
        echo "Usage: [-q query] [-c credential]" 1>&2
        return 0
    }

    QUERY=""
    EC2_PROFILE="default"

    while getopts q:c:h OPT
    do
        case $OPT in
            q)  QUERY=$OPTARG
                ;;
            c)  EC2_PROFILE=$OPTARG
                ;;
            h)  usage_exit
                return 0
                ;;
            \?) usage_exit
                return 0
                ;;
        esac
    done

    if [[ $QUERY == "" ]]; then
      PECO=peco
    else
      PECO="peco --query $QUERY"
    fi

    ec2-instances -c $EC2_PROFILE | eval $PECO | awk '{ print $3 }'
}

# Formatting [instance_name, public_ip, private_ip]
function ec2-instances() {
    usage_exit() {
        echo "Usage: [-c credential]" 1>&2
        return 0
    }

    EC2_PROFILE="default"

    while getopts c:h OPT
    do
        case $OPT in
            c)  EC2_PROFILE=$OPTARG
                ;;
            h)  usage_exit
                return 0
                ;;
            \?) usage_exit
                return 0
                ;;
        esac
    done

    aws ec2 describe-instances \
      --filters 'Name=instance-state-name,Values=running' \
      --query 'Reservations[*].Instances[*].[Tags[?Key==`Name`].Value[],PublicIpAddress,PrivateIpAddress]' \
      --output json \
      --profile $EC2_PROFILE | \
      jq -r -c 'sort_by(.[][]) | reverse | .[][] | [ (.[0][] // "null"), .[1], .[2] ] | join(" ")'
}

# ec2-scp
#
# ssh login to ec2 server
#
function ec2-scp() {
    usage_exit() {
        echo "Usage: -u user -p port [-q query] -f original file -o output [-c credential]" 1>&2
        return 0
    }

    QUERY=""
    EC2_SSH_USER=akiramiki
    port=2222
    EC2_PROFILE="default"

    while getopts u:q:i:f:o:p:h OPT
    do
        case $OPT in
            u)  EC2_SSH_USER=$OPTARG
                ;;
            q)  QUERY=$OPTARG
                ;;
            f)  file=$OPTARG
                ;;
            o)  output=$OPTARG
                ;;
            p)  port=$OPTARG
                ;;
            c)  EC2_PROFILE=$OPTARG
                ;;
            h)  usage_exit
                return 0
                ;;
            \?) usage_exit
                return 0
                ;;
        esac
    done

  if [[ $bucket == "" ]]; then usage_exit; return 0; fi
  if [[ $key == "" ]]; then usage_exit; return 0; fi

  scp -P$port -i ~/.ssh/id_rsa $EC2_SSH_USER@$(ec2-public-ip -q $QUERY -c $EC2_PROFILE):$file $output
}

# ssh login to ec2 server
function ec2-ssh() {
    usage_exit() {
        echo "Usage: [-u user] [-p port] [-q query] [-k key] [-c credential]" 1>&2
        return 0
    }

    QUERY=""
    KEY=~/.ssh/id_rsa
    EC2_SSH_USER=$USER
    PORT=22
    EC2_PROFILE="default"

    while getopts u:p:q:k:c:h OPT
    do
        case $OPT in
            u)  EC2_SSH_USER=$OPTARG
                ;;
            p)  PORT=$OPTARG
                ;;
            q)  QUERY=$OPTARG
                ;;
            k)  KEY=$OPTARG
                ;;
            c)  EC2_PROFILE=$OPTARG
                ;;
            h)  usage_exit
                return 0
                ;;
            \?) usage_exit
                return 0
                ;;
        esac
    done

    if [[ $QUERY != "" ]]; then
      HOST=$(ec2-public-ip -q $QUERY -c $EC2_PROFILE)
    else
      HOST=$(ec2-public-ip -c $EC2_PROFILE)
    fi

    ssh $EC2_SSH_USER@$HOST -p $PORT -i $KEY
}

# ec2-mosh
#
# ssh login to ec2 server
#
function ec2-mosh() {
    usage_exit() {
        echo "Usage: [-u user] [-q query] [-k key] [-c credential]" 1>&2
        return 0
    }

    QUERY=""
    KEY=~/.ssh/id_rsa
    EC2_SSH_USER=akiramiki
    RUN_FLG=1
    EC2_PROFILE="default"

    while getopts u:q:k:c:h OPT
    do
        case $OPT in
            u)  EC2_SSH_USER=$OPTARG
                ;;
            q)  QUERY=$OPTARG
                ;;
            k)  KEY=$OPTARG
                ;;
            c)  EC2_PROFILE=$OPTARG
                ;;
            h)  usage_exit
                return 0
                ;;
            \?) usage_exit
                return 0
                ;;
        esac
    done

    if [[ $RUN_FLG != 0 ]]; then
      if [[ $QUERY != "" ]]; then
        mosh $EC2_SSH_USER@$(ec2-public-ip -q $QUERY -c $EC2_PROFILE) --ssh="ssh -p 2222 -i $KEY"
      else
        mosh $EC2_SSH_USER@$(ec2-public-ip -c $EC2_PROFILE) --ssh="ssh -p 2222 -i $KEY"
      fi
    fi
}

# ec2-cluster
#
# ssh login to ec2 servers
# required tmux-cssh
#
function ec2-cluster() {
    usage_exit() {
        echo "Usage: [-u user] [-q query] [-k key]" 1>&2
        return 0
    }

    QUERY=""
    KEY=~/.ssh/id_rsa
    EC2_SSH_USER=akiramiki
    RUN_FLG=1
    EC2_PROFILE="default"

    while getopts u:q:c:k:h OPT
    do
        case $OPT in
            u)  EC2_SSH_USER=$OPTARG
                ;;
            q)  QUERY=$OPTARG
                ;;
            k)  KEY=$OPTARG
                ;;
            c)  EC2_PROFILE=$OPTARG
                ;;
            h)  usage_exit
                return 0
                ;;
            \?) usage_exit
                return 0
                ;;
        esac
    done

    if [[ $QUERY != "" ]]; then
      HOSTS=$(ec2-public-ip -q $QUERY -c $EC2_PROFILE | sed "s/$/:2222/g" | tr "\n", " ")
    else
      HOSTS=$(ec2-public-ip -c $EC2_PROFILE | sed "s/$/:2222/g" | tr "\n", " ")
    fi

    if [[ $RUN_FLG != 0 ]]; then
        sh -c "tmux-cssh -u $EC2_SSH_USER -c $KEY -sc $HOSTS -sa -oStrictHostKeyChecking=no"
    fi
}
